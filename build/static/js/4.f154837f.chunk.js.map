{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","console","log","path","exact","to","url"],"mappings":"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","file":"static/js/4.f154837f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__32Tml\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2zlpg\",\"loading\":\"NewCommentForm_loading__gY-nT\",\"control\":\"NewCommentForm_control__tdOXp\",\"actions\":\"NewCommentForm_actions__1Wwtr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2_BTK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1CRrz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1ZNx1\"};","import { useRef, useEffect } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport useHttp from '../../hooks/hooks/use-http';\nimport { addComment } from '../../lib/lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {sendRequest, status, error} = useHttp(addComment);\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error)\n    {\n       onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    const enteredText = commentTextRef.current.value;\n\n    // send comment to server\n    sendRequest({commentData : {text : enteredText}, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      { status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/hooks/use-http\";\nimport { getAllComments } from \"../../lib/lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n   sendRequest(quoteId)\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length === 0) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\n// const DUMMY_QUOTES = [\r\n//   { id: \"p1\", author: \"Max\", text: \"Learning React is a fun!!!\" },\r\n//   { id: \"p2\", author: \"Maximiler\", text: \"Learning React is great\" },\r\n//   { id: \"p3\", author: \"Milind\", text: \"Learning React is well...\" },\r\n// ];\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n  const {quoteId} = params;\r\n  const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\r\n  console.log(match);\r\n\r\n  useEffect( () => {\r\n      sendRequest(quoteId);\r\n  }, [sendRequest, quoteId])\r\n\r\n  if(status === 'pending')\r\n  {\r\n      return <div className=\"centered\">\r\n          <LoadingSpinner />\r\n      </div>\r\n  }\r\n\r\n  if(error)\r\n  {\r\n      return <p className='centered'>\r\n          {error}\r\n      </p>\r\n  }\r\n\r\n//   const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      {/* <h2>{params.quoteId}</h2> */}\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}